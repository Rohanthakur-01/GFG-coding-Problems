//GFG Problem Maximum sum of Non-adjacent nodes(medium)
//Binary tree data structure
//using c++
//TC = O(N), SC = O(N)

class Solution{
  public:
  pair<int,int> solve(Node* root){
      //base case 
      if(root == NULL){
          pair<int,int> p = make_pair(0,0);
          return p;
      }
       //left call
       pair<int,int> left = solve(root -> left);
       //right call 
       pair<int,int> right = solve(root -> right);
       
       pair<int,int> res;
       res.first = root -> data + left.second + right.second;
       res.second = max(left.first,left.second) + max(right.first, right.second);
       
      
      return res;
  }
    //Function to return the maximum sum of non-adjacent nodes.
    int getMaxSum(Node *root) 
    {
        // Add your code here
       pair<int,int> ans = solve(root);
       return max(ans.first,ans.second);
    }
};
